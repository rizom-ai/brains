---
import { getCollection } from 'astro:content';
import '../styles/global.css';

const landingData = await getCollection('landing');
const landing = landingData[0]?.data;

if (!landing) {
  throw new Error('No landing page data found');
}

const { title, tagline, hero, features, products, cta } = landing;
---

<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>{title}</title>
  <meta name="description" content={tagline}>
</head>
<body class="min-h-screen">
  <!-- Hero Section with Background Pattern -->
  <section class="relative overflow-hidden bg-gradient-to-br from-background-light to-gray-50">
    <!-- Decorative background pattern -->
    <div class="absolute inset-0 opacity-5 pointer-events-none">
      <div class="absolute inset-0" style="background-image: radial-gradient(circle at 1px 1px, rgb(99 102 241) 1px, transparent 0); background-size: 20px 20px;"></div>
    </div>
    
    <!-- Floating shapes decoration -->
    <div class="absolute top-20 left-10 w-72 h-72 bg-primary-purple-light rounded-full mix-blend-multiply filter blur-xl opacity-20 animate-blob"></div>
    <div class="absolute top-40 right-10 w-72 h-72 bg-accent-orange rounded-full mix-blend-multiply filter blur-xl opacity-20 animate-blob animation-delay-2000"></div>
    <div class="absolute -bottom-8 left-1/2 w-72 h-72 bg-primary-purple rounded-full mix-blend-multiply filter blur-xl opacity-20 animate-blob animation-delay-4000"></div>
    
    <div class="relative max-w-7xl mx-auto px-4 py-section md:py-section-lg">
      <!-- Hero Content -->
      <div class="text-center max-w-4xl mx-auto">
        <h1 class="text-4xl md:text-5xl lg:text-6xl font-extrabold text-text-dark mb-6 leading-tight">
          <span class="block">{hero.headline.split(' ').slice(0, Math.ceil(hero.headline.split(' ').length/2)).join(' ')}</span>
          <span class="block bg-gradient-to-r from-primary-purple to-accent-orange bg-clip-text text-transparent">
            {hero.headline.split(' ').slice(Math.ceil(hero.headline.split(' ').length/2)).join(' ')}
          </span>
        </h1>
        
        <p class="text-xl md:text-2xl text-text-gray mb-10 max-w-3xl mx-auto leading-relaxed">
          {hero.subheadline}
        </p>
        
        <!-- CTA Buttons with enhanced styling -->
        <div class="flex flex-col sm:flex-row gap-4 justify-center">
          <a 
            href={hero.ctaLink} 
            class="group inline-flex items-center justify-center px-8 py-4 text-lg font-semibold text-white bg-gradient-to-r from-accent-orange to-accent-orange-dark rounded-xl shadow-lg hover:-translate-y-0.5 hover:shadow-xl transition-all duration-200 focus:outline-none focus:ring-4 focus:ring-orange-500/20"
          >
            {hero.ctaText}
            <svg class="ml-2 w-5 h-5 group-hover:translate-x-1 transition-transform" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M13 7l5 5m0 0l-5 5m5-5H6"></path>
            </svg>
          </a>
          <a 
            href="#features" 
            class="inline-flex items-center justify-center px-8 py-4 text-lg font-semibold text-primary-purple border-2 border-primary-purple rounded-xl hover:bg-primary-purple hover:text-white hover:shadow-lg hover:-translate-y-0.5 transition-all duration-200 focus:outline-none focus:ring-4 focus:ring-primary-purple/20"
          >
            Learn More
            <svg class="ml-2 w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 14l-7 7m0 0l-7-7m7 7V3"></path>
            </svg>
          </a>
        </div>
      </div>
    </div>
    
    <!-- Wave divider -->
    <div class="absolute bottom-0 left-0 right-0 h-16 bg-white">
      <svg class="absolute bottom-0 w-full h-16" preserveAspectRatio="none" viewBox="0 0 1200 120">
        <path d="M321.39,56.44c58-10.79,114.16-30.13,172-41.86,82.39-16.72,168.19-17.73,250.45-.39C823.78,31,906.67,72,985.66,92.83c70.05,18.48,146.53,26.09,214.34,3V0H0V27.35A600.21,600.21,0,0,0,321.39,56.44Z" 
              fill="white"></path>
      </svg>
    </div>
  </section>

  <!-- Feature Cards Section -->
  <section id="features" class="py-section md:py-section-lg bg-gray-50">
    <div class="max-w-7xl mx-auto px-4">
      <div class="text-center mb-16">
        {features && (
          <>
            <span class="inline-block px-4 py-2 text-sm font-semibold text-primary-purple bg-primary-purple-light/20 rounded-full mb-4">
              {features.label}
            </span>
            <h2 class="text-3xl md:text-4xl lg:text-5xl font-bold text-text-dark mb-6">
              <Fragment set:html={features.headline.replace(/\*\*(.*?)\*\*/g, '<span class="bg-gradient-to-r from-primary-purple to-accent-orange bg-clip-text text-transparent">$1</span>')} />
            </h2>
            <p class="text-lg md:text-xl text-text-gray max-w-3xl mx-auto">
              {features.description}
            </p>
          </>
        )}
      </div>
      
      <div class="grid grid-cols-1 md:grid-cols-3 gap-6 lg:gap-8">
        {features?.features && features.features.map((feature, index) => {
          // Define icon SVG paths
          const iconPaths = {
            lightning: "M13 10V3L4 14h7v7l9-11h-7z",
            lock: "M12 15v2m-6 4h12a2 2 0 002-2v-6a2 2 0 00-2-2H6a2 2 0 00-2 2v6a2 2 0 002 2zm10-10V7a4 4 0 00-8 0v4h8z",
            check: "M9 12l2 2 4-4m6 2a9 9 0 11-18 0 9 9 0 0118 0z",
            chart: "M9 19v-6a2 2 0 00-2-2H5a2 2 0 00-2 2v6a2 2 0 002 2h2a2 2 0 002-2zm0 0V9a2 2 0 012-2h2a2 2 0 012 2v10m-6 0a2 2 0 002 2h2a2 2 0 002-2m0 0V5a2 2 0 012-2h2a2 2 0 012 2v14a2 2 0 01-2 2h-2a2 2 0 01-2-2z",
            users: "M12 4.354a4 4 0 110 5.292M15 21H3v-1a6 6 0 0112 0v1zm0 0h6v-1a6 6 0 00-9-5.197M13 7a4 4 0 11-8 0 4 4 0 018 0z",
            brain: "M9.663 17h4.673M12 3v1m6.364 1.636l-.707.707M21 12h-1M4 12H3m3.343-5.657l-.707-.707m2.828 9.9a5 5 0 117.072 0l-.548.547A3.374 3.374 0 0014 18.469V19a2 2 0 11-4 0v-.531c0-.895-.356-1.754-.988-2.386l-.548-.547z",
            rocket: "M13 7h8m0 0v8m0-8l-8 8-4-4-6 6"
          };
          
          const gradientClasses = {
            purple: "from-primary-purple-light to-primary-purple",
            orange: "from-accent-orange/20 to-accent-orange",
            teal: "from-teal-400 to-teal-600"
          };
          
          const bgGradient = feature.colorScheme ? gradientClasses[feature.colorScheme] : gradientClasses.purple;
          const iconPath = iconPaths[feature.icon] || iconPaths.lightning;
          
          return (
            <div class="group bg-white rounded-2xl shadow-sm border border-border-light p-8 text-center hover:-translate-y-1 hover:shadow-lg hover:border-primary-purple-light transition-all duration-300">
              <div class={`inline-flex items-center justify-center w-20 h-20 rounded-2xl bg-gradient-to-br ${bgGradient} mb-6 group-hover:scale-110 transition-transform duration-300`}>
                <svg class="w-10 h-10 text-white" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d={iconPath}></path>
                </svg>
              </div>
              <h3 class="text-2xl font-bold text-text-dark mb-4">{feature.title}</h3>
              <p class="text-text-gray leading-relaxed">{feature.description}</p>
              {feature.link && (
                <div class="mt-6 opacity-0 group-hover:opacity-100 transition-opacity duration-300">
                  <a href={feature.link} class="text-primary-purple font-semibold inline-flex items-center">
                    {feature.linkText || 'Learn more'}
                    <svg class="ml-1 w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                      <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 5l7 7-7 7"></path>
                    </svg>
                  </a>
                </div>
              )}
            </div>
          );
        })}
      </div>
    </div>
  </section>

  <!-- Products Section -->
  {products && (
    <section id="products" class="py-section md:py-section-lg bg-white">
      <div class="max-w-7xl mx-auto px-4">
        <div class="text-center mb-16">
          <span class="inline-block px-4 py-2 text-sm font-semibold text-primary-purple bg-primary-purple-light/20 rounded-full mb-4">
            {products.label}
          </span>
          <h2 class="text-3xl md:text-4xl lg:text-5xl font-bold text-text-dark mb-6">
            <Fragment set:html={products.headline.replace(/\*\*(.*?)\*\*/g, '<span class="bg-gradient-to-r from-primary-purple to-accent-orange bg-clip-text text-transparent">$1</span>')} />
          </h2>
          <p class="text-lg md:text-xl text-text-gray max-w-3xl mx-auto">
            {products.description}
          </p>
        </div>
        
        <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6 lg:gap-8">
          {products.products.map((product) => {
            const iconPaths = {
              brain: "M9.663 17h4.673M12 3v1m6.364 1.636l-.707.707M21 12h-1M4 12H3m3.343-5.657l-.707-.707m2.828 9.9a5 5 0 117.072 0l-.548.547A3.374 3.374 0 0014 18.469V19a2 2 0 11-4 0v-.531c0-.895-.356-1.754-.988-2.386l-.548-.547z",
              network: "M21 12a9 9 0 01-9 9m9-9a9 9 0 00-9-9m9 9H3m9 9a9 9 0 01-9-9m9 9c1.657 0 3-4.03 3-9s-1.343-9-3-9m0 18c-1.657 0-3-4.03-3-9s1.343-9 3-9m-9 9a9 9 0 019-9",
              tools: "M10.325 4.317c.426-1.756 2.924-1.756 3.35 0a1.724 1.724 0 002.573 1.066c1.543-.94 3.31.826 2.37 2.37a1.724 1.724 0 001.065 2.572c1.756.426 1.756 2.924 0 3.35a1.724 1.724 0 00-1.066 2.573c.94 1.543-.826 3.31-2.37 2.37a1.724 1.724 0 00-2.572 1.065c-.426 1.756-2.924 1.756-3.35 0a1.724 1.724 0 00-2.573-1.066c-1.543.94-3.31-.826-2.37-2.37a1.724 1.724 0 00-1.065-2.572c-1.756-.426-1.756-2.924 0-3.35a1.724 1.724 0 001.066-2.573c-.94-1.543.826-3.31 2.37-2.37.996.608 2.296.07 2.572-1.065z M15 12a3 3 0 11-6 0 3 3 0 016 0z",
              puzzle: "M11 4a2 2 0 114 0v1a1 1 0 001 1h3a1 1 0 011 1v3a1 1 0 01-1 1h-1a2 2 0 100 4h1a1 1 0 011 1v3a1 1 0 01-1 1h-3a1 1 0 01-1-1v-1a2 2 0 10-4 0v1a1 1 0 01-1 1H7a1 1 0 01-1-1v-3a1 1 0 00-1-1H4a2 2 0 110-4h1a1 1 0 001-1V7a1 1 0 011-1h3a1 1 0 001-1V4z",
              book: "M12 6.253v13m0-13C10.832 5.477 9.246 5 7.5 5S4.168 5.477 3 6.253v13C4.168 18.477 5.754 18 7.5 18s3.332.477 4.5 1.253m0-13C13.168 5.477 14.754 5 16.5 5c1.747 0 3.332.477 4.5 1.253v13C19.832 18.477 18.247 18 16.5 18c-1.746 0-3.332.477-4.5 1.253",
              database: "M4 7v10c0 2.21 3.582 4 8 4s8-1.79 8-4V7M4 7c0 2.21 3.582 4 8 4s8-1.79 8-4M4 7c0-2.21 3.582-4 8-4s8 1.79 8 4m0 5c0 2.21-3.582 4-8 4s-8-1.79-8-4"
            };
            
            const statusColors = {
              live: "bg-green-100 text-green-800",
              beta: "bg-blue-100 text-blue-800",
              alpha: "bg-yellow-100 text-yellow-800",
              planned: "bg-gray-100 text-gray-800"
            };
            
            const iconPath = iconPaths[product.icon] || iconPaths.puzzle;
            const statusClass = statusColors[product.status] || statusColors.planned;
            
            return (
              <div class="group bg-gray-50 rounded-2xl p-8 hover:bg-white hover:shadow-lg hover:-translate-y-1 transition-all duration-300 border border-transparent hover:border-primary-purple-light">
                <div class="flex items-start justify-between mb-6">
                  <div class="inline-flex items-center justify-center w-16 h-16 rounded-xl bg-gradient-to-br from-primary-purple-light to-primary-purple text-white group-hover:scale-110 transition-transform duration-300">
                    <svg class="w-8 h-8" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                      <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d={iconPath}></path>
                    </svg>
                  </div>
                  <span class={`px-3 py-1 text-xs font-semibold rounded-full ${statusClass}`}>
                    {product.status}
                  </span>
                </div>
                
                <h3 class="text-2xl font-bold text-text-dark mb-2">{product.name}</h3>
                <p class="text-sm font-semibold text-primary-purple mb-4">{product.tagline}</p>
                <p class="text-text-gray leading-relaxed mb-6">{product.description}</p>
                
                {product.link && (
                  <a href={product.link} class="inline-flex items-center text-primary-purple font-semibold opacity-0 group-hover:opacity-100 transition-opacity duration-300">
                    Learn more
                    <svg class="ml-1 w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                      <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 5l7 7-7 7"></path>
                    </svg>
                  </a>
                )}
              </div>
            );
          })}
        </div>
      </div>
    </section>
  )}

  <!-- CTA Section with Gradient Background -->
  {cta && (
    <section class="relative py-section md:py-section-lg overflow-hidden">
      <div class="absolute inset-0 bg-gradient-to-br from-primary-purple-dark to-primary-purple"></div>
      <div class="absolute inset-0 opacity-10 pointer-events-none">
        <div class="absolute inset-0" style="background-image: radial-gradient(circle at 2px 2px, rgba(255, 255, 255, 0.15) 1px, transparent 0); background-size: 40px 40px;"></div>
      </div>
      
      <div class="relative max-w-7xl mx-auto px-4 text-center">
        <h2 class="text-3xl md:text-4xl lg:text-5xl font-bold text-white mb-6">
          {cta.headline}
        </h2>
        <p class="text-xl md:text-2xl text-purple-100 mb-10 max-w-3xl mx-auto leading-relaxed">
          {cta.description}
        </p>
        <div class="flex flex-col sm:flex-row gap-4 justify-center">
          <a href={cta.primaryButton.link} class="group inline-flex items-center justify-center px-10 py-5 text-lg font-bold text-primary-purple bg-white rounded-2xl hover:shadow-2xl hover:-translate-y-1 transition-all duration-300">
            {cta.primaryButton.text}
            <svg class="ml-2 w-5 h-5 group-hover:translate-x-1 transition-transform" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M13 7l5 5m0 0l-5 5m5-5H6"></path>
            </svg>
          </a>
          {cta.secondaryButton && (
            <a href={cta.secondaryButton.link} class="group inline-flex items-center justify-center px-10 py-5 text-lg font-bold text-white border-2 border-white/80 rounded-2xl hover:bg-white hover:text-primary-purple hover:border-white transition-all duration-300">
              {cta.secondaryButton.text}
              <svg class="ml-2 w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M14.752 11.168l-3.197-2.132A1 1 0 0010 9.87v4.263a1 1 0 001.555.832l3.197-2.132a1 1 0 000-1.664z"></path>
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M21 12a9 9 0 11-18 0 9 9 0 0118 0z"></path>
              </svg>
            </a>
          )}
        </div>
      </div>
    </section>
  )}
</body>
</html>